import { withAuth } from "next-auth/middleware";
import { NextResponse } from "next/server";

export default withAuth(
  function middleware(req) {
    console.log('\nüîí --- D√©but Middleware ---');
    console.log(`üìç Route demand√©e: ${req.nextUrl.pathname}`);

    const token = req.nextauth.token;
    const isAuth = !!token;
    const isAuthPage = req.nextUrl.pathname.startsWith('/login');

    console.log('üîë √âtat authentification:', {
      isAuth,
      isAuthPage,
      userRole: token?.role || 'non connect√©'
    });

    // Gestion des pages d'authentification
    if (isAuthPage) {
      if (isAuth) {
        console.log('‚§¥Ô∏è Redirection: Utilisateur d√©j√† connect√© -> dashboard');
        return NextResponse.redirect(new URL(`/${token.role}/dashboard`, req.url));
      }
      console.log('‚úÖ Acc√®s autoris√© √† la page de login');
      return null;
    }

    // V√©rification de l'authentification
    if (!isAuth) {
      console.log('‚ùå Acc√®s refus√©: Utilisateur non authentifi√©');
      let callbackUrl = req.nextUrl.pathname;
      console.log(`‚§¥Ô∏è Redirection vers: /login?callbackUrl=${callbackUrl}`);
      return NextResponse.redirect(new URL(`/login?callbackUrl=${callbackUrl}`, req.url));
    }

    // V√©rification des permissions bas√©es sur account_type
    if (req.nextUrl.pathname.startsWith('/owner')) {
      console.log('üîç V√©rification des permissions /owner');
      if (token?.role !== 'owner') {
        console.log('‚ùå Acc√®s refus√©: R√¥le incorrect', { required: 'owner', actual: token?.role });
        return NextResponse.redirect(new URL("/unauthorized", req.url));
      }
    }

    if (req.nextUrl.pathname.startsWith('/user')) {
      console.log('üîç V√©rification des permissions /user');
      if (token?.role !== 'user') {
        console.log('‚ùå Acc√®s refus√©: R√¥le incorrect', { required: 'user', actual: token?.role });
        return NextResponse.redirect(new URL("/unauthorized", req.url));
      }
    }

    console.log('‚úÖ Acc√®s autoris√©');
    console.log('üîí --- Fin Middleware ---\n');
    return NextResponse.next();
  },
  {
    callbacks: {
      authorized: ({ token }) => !!token,
    },
  }
);

// Configuration des chemins prot√©g√©s
export const config = {
  matcher: [
    '/owner/:path*',
    '/traveler/:path*',
    '/dashboard/:path*',
    '/login'
  ]
};
